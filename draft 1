#include<stdio.h>
#include<math.h>
#include<stdlib.h>
//la fonctiom etudiee est une fonction parabolique, de type y=x^2

int hyperbole(int x){
  retrun pow(x,2);}

int deriveeprem(int y){
  int yp;
  return yp=2x;}

int deriveesec(int x){
  int ypp;
  return ypp=2;}

void euler(int nt, double t[nt], double x0, double x[nt]){     //xi+1
    int i;
    double dt;
    double y[0] = 0;
    for(i=0;i<nt-1;i++){
        dt = t[i+1]-t[i];
        x[i+1] = x[i] + dt*f(x[i],t[i]);
    }
}

void euler(int nt, double t[nt], double y0, double y[nt]){  //x'i+1
    int i;
    double dt;
    y[0] = y0;
    for(i=0;i<nt-1;i++){
        dt = t[i+1]-t[i];
        yp[i+1] = yp[i] + dt*f(y[i],t[i]);
    }
}

void euler_stylé(int nt, double t[nt], double** Xk){
    double dt;
    double* F;
    for(int i = 1; i<nt; i++){
        dt = t[i] - t[i-1];
        F = F2(Yk, i);
        Yk[i] = malloc(sizeof(double)*2);
        Yk[i][0]= Yk[i-1][0] + dt*F[0];
        Yk[i][1] = Yk[i-1][1] + dt*F[1];
        free(F);
    }
}

int main(){
    const int N = 2000;
    double t[N];
    t[0] = 0;
    /!\ double pas = (4*M_PI - 0.0)/(N-1 + 0.0); /!\ WIP
    for(int i = 1; i<N; i++){
        t[i] = t[i-1] + pas;
    }
    double** Xk = malloc(sizeof(double*)*N);
    Xk[0] = malloc(sizeof(double)*2);
    Xk[0][0] = 0;
    Xk[0][1] = 1;
    euler_stylé(N, t, Yk);
    FILE* stream = fopen("Montagnes.txt", "a");
    for(int i=0; i<N; i++){
        fprintf(stream, "%.12f\t%.12f\t%.12f\t%.12f\n", t[i], yt[i], Yk[i][0], Yk[i][1]);
        free(Yk[i]);
    }
    free(Yk);
    fclose(stream);

}


